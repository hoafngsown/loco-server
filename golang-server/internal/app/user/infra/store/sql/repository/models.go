// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type PreferenceType string

const (
	PreferenceTypeVibe  PreferenceType = "vibe"
	PreferenceTypeStyle PreferenceType = "style"
)

func (e *PreferenceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreferenceType(s)
	case string:
		*e = PreferenceType(s)
	default:
		return fmt.Errorf("unsupported scan type for PreferenceType: %T", src)
	}
	return nil
}

type NullPreferenceType struct {
	PreferenceType PreferenceType
	Valid          bool // Valid is true if PreferenceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreferenceType) Scan(value interface{}) error {
	if value == nil {
		ns.PreferenceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreferenceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreferenceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreferenceType), nil
}

type PreferenceMetadatum struct {
	ID        uuid.UUID
	Key       string
	Type      PreferenceType
	CreatedAt time.Time
	UpdatedAt time.Time
}

type RefreshToken struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	ExpiredAt time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

type User struct {
	ID                uuid.UUID
	Email             string
	Password          string
	DisplayName       string
	Preference        json.RawMessage
	HasCompletedSetup bool
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

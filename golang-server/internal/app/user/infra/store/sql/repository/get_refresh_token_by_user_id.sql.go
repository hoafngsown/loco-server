// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_refresh_token_by_user_id.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getRefreshTokenByUserID = `-- name: GetRefreshTokenByUserID :one
SELECT id, user_id, token, expired_at
FROM refresh_token
WHERE user_id = $1
LIMIT 1
`

type GetRefreshTokenByUserIDRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	ExpiredAt time.Time
}

func (q *Queries) GetRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) (GetRefreshTokenByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserID, userID)
	var i GetRefreshTokenByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiredAt,
	)
	return i, err
}
